#+title: git
#+options: num:nil toc:t

* git baby steps
<2025-08-24 Sun>

These notes are meant to serve as a roadmap for people that come after me, and
are looking to learn enough to be useful and contribute to git.
** [[https://github.com/ragtux/cnility][k&r]]
Understanding c thoroughly is important. Treat this as a sacred text.
** [[https://bitbucket.org/jacobstopak/baby-git][baby-git]]
Understanding gits initial commit is something that you are able to do much
easier than reading the current entire codebase.
** [[https://git-scm.com/book/en/v2][pro git book]]
Read this so that you can start learning everything about git. Treat this as one
of your sacred texts.
** [[https://git.github.io/GSoC-Participants/][past git GSoC contributors]]
This is a great resource, it might make sense to review previous work done in
order to familiarize oneself with the process.
** [[https://git.github.io/][git developer pages]]
Use these pages to get a grip on contributing to git.
** [[https://public-inbox.org/git/?q=%23leftoverbits][#leftoverbits]]
Search for this in the mailing list to find potential things you can do.
** [[https://lore.kernel.org/git/CAOLa=ZSHETyzEyyJvP-VT9CbvrJt_jV65nEyCOzR3YGRgFNkrQ@mail.gmail.com/T/#t][GSoC application announcement]]
The GSoC applications for 2025 were due in February.
* day 1
:LOGBOOK:
CLOCK: [2025-10-13 Mon 12:56]--[2025-10-13 Mon 13:47] =>  0:51
:END:
<2025-10-13 Mon>

Today marks my first day in an experiment i'm conducting on myself. The goal is
to spend at least one hour every day involved in learning about git. Before
starting this, I have done some collecting of sources, and some reading of how
to use git. My abilities with git are good enough for keeping configuration
repositories between my desktop and my laptop, but I still am barely grasping
how git works internally.

** [[https://git-scm.com/book/en/v2][pro git]]
Still I have to read through;

- Distributed Git
- GitHub
- Git Tools
- Customizing Git
- Git and Other Systems
- Git Internals

** [[https://gitexercises.fracz.com/][git exercises]]
I started this a while ago but still need to finish them. I think I could go
through them all again.
** TIL about git shortlog
This feature is awesome, you can use it to easily see how many commits people
are making to a repository. With the command
#+begin_src sh
git shortlog -ns
#+end_src
you are able to see who has committed the most to a repository. Here is the
output of that command on the git repo;
#+begin_example
 27457  Junio C Hamano
  4611  Jeff King
  2390  Johannes Schindelin
  1945  Ævar Arnfjörð Bjarmason
  1824  Nguyễn Thái Ngọc Duy
  1810  Patrick Steinhardt
  1401  Shawn O. Pearce
  1314  René Scharfe
  1203  Elijah Newren
  1118  Linus Torvalds
   954  Michael Haggerty
   902  brian m. carlson
#+end_example
Fascinating. Junio C Hamano is legendary!
* day 2
<2025-10-14 Tue>
:LOGBOOK:
CLOCK: [2025-10-14 Tue 11:18]--[2025-10-14 Tue 11:57] =>  0:39
:END:

Today I am exploring the git source code and trying to figure out how things
work.
command works.
** Finding list of commands
Git has lots of commands. Here is how you can find where the commands are in the
source. I used the command
#+begin_src sh
grep -nr "list of commands"
#+end_src

to find that there is a list of commands in the git.c file;

#+begin_example
Documentation/MyFirstContribution.adoc:220:The list of commands lives in `git.c`.
#+end_example

In that file is the list of commands. Here they are cleaned up so that each
command is on a single line;

#+begin_example
"add"
"am"
"annotate"
"apply"
"archive"
"backfill"
"bisect"
"blame"
"branch"
"bugreport"
"bundle"
"cat-file"
"check-attr"
"check-ignore"
"check-mailmap"
"check-ref-format"
"checkout"
"checkout--worker"
"checkout-index"
"cherry"
"cherry-pick"
"clean"
"clone"
"column"
"commit"
"commit-graph"
"commit-tree"
"config"
"count-objects"
"credential"
"credential-cache"
"credential-cache--daemon"
"credential-store"
"describe"
"diagnose"
"diff"
"diff-files"
"diff-index"
"diff-pairs"
"diff-tree"
"difftool"
"fast-export"
"fast-import"
"fetch"
"fetch-pack"
"fmt-merge-msg"
"for-each-ref"
"for-each-repo"
"format-patch"
"fsck"
"fsck-objects"
"fsmonitor--daemon"
"gc"
"get-tar-commit-id"
"grep"
"hash-object"
"help"
"hook"
"index-pack"
"init"
"init-db"
"interpret-trailers"
"last-modified"
"log"
"ls-files"
"ls-remote"
"ls-tree"
"mailinfo"
"mailsplit"
"maintenance"
"merge"
"merge-base"
"merge-file"
"merge-index"
"merge-ours"
"merge-recursive"
"merge-recursive-ours"
"merge-recursive-theirs"
"merge-subtree"
"merge-tree"
"mktag"
"mktree"
"multi-pack-index"
"mv"
"name-rev"
"notes"
"pack-objects"
"pack-redundant"
"pack-refs"
"patch-id"
"pickaxe"
"prune"
"prune-packed"
"pull"
"push"
"range-diff"
"read-tree"
"rebase"
"receive-pack"
"reflog"
"refs"
"remote"
"remote-ext"
"remote-fd"
"repack"
"replace"
"replay"
"repo"
"rerere"
"reset"
"restore"
"rev-list"
"rev-parse"
"revert"
"rm"
"send-pack"
"shortlog"
"show"
"show-branch"
"show-index"
"show-ref"
"sparse-checkout"
"stage"
"stash"
"status"
"stripspace"
"submodule--helper"
"switch"
"symbolic-ref"
"tag"
"unpack-file"
"unpack-objects"
"update-index"
"update-ref"
"update-server-info"
"upload-archive"
"upload-archive--writer"
"upload-pack"
"var"
"verify-commit"
"verify-pack"
"verify-tag"
"version"
"whatchanged"
"worktree"
"write-tree"
#+end_example
** Let's find out how git add works
Let's focus on a command I've probably used hundreds of times already:

#+begin_src sh
git add
#+end_src

We can find the following in builtins/add.c;

#+begin_src C
static struct option builtin_add_options[] = {
  OPT__DRY_RUN(&show_only, N_("dry run")),
  OPT__VERBOSE(&verbose, N_("be verbose")),
  OPT_GROUP(""),
  OPT_BOOL('i', "interactive", &add_interactive, N_("interactive picking")),
  OPT_BOOL('p', "patch", &patch_interactive, N_("select hunks interactively")),
  OPT_DIFF_UNIFIED(&add_p_opt.context),
  OPT_DIFF_INTERHUNK_CONTEXT(&add_p_opt.interhunkcontext),
  OPT_BOOL('e', "edit", &edit_interactive, N_("edit current diff and apply")),
  OPT__FORCE(&ignored_too, N_("allow adding otherwise ignored files"), 0),
  OPT_BOOL('u', "update", &take_worktree_changes, N_("update tracked files")),
  OPT_BOOL(0, "renormalize", &add_renormalize, N_("renormalize EOL of tracked files (implies -u)")),
  OPT_BOOL('N', "intent-to-add", &intent_to_add, N_("record only the fact that the path will be added later")),
  OPT_BOOL('A', "all", &addremove_explicit, N_("add changes from all tracked and untracked files")),
  OPT_CALLBACK_F(0, "ignore-removal", &addremove_explicit,
                 NULL /* takes no arguments */,
                 N_("ignore paths removed in the working tree (same as --no-all)"),
                 PARSE_OPT_NOARG, ignore_removal_cb),
  OPT_BOOL( 0 , "refresh", &refresh_only, N_("don't add, only refresh the index")),
  OPT_BOOL( 0 , "ignore-errors", &ignore_add_errors, N_("just skip files which cannot be added because of errors")),
  OPT_BOOL( 0 , "ignore-missing", &ignore_missing, N_("check if - even missing - files are ignored in dry run")),
  OPT_BOOL(0, "sparse", &include_sparse, N_("allow updating entries outside of the sparse-checkout cone")),
  OPT_STRING(0, "chmod", &chmod_arg, "(+|-)x",
             N_("override the executable bit of the listed files")),
  OPT_HIDDEN_BOOL(0, "warn-embedded-repo", &warn_on_embedded_repo,
                  N_("warn when adding an embedded repository")),
  OPT_PATHSPEC_FROM_FILE(&pathspec_from_file),
  OPT_PATHSPEC_FILE_NUL(&pathspec_file_nul),
  OPT_END(),
};
#+end_src
* day 3
<2025-11-15 Sat>

Looks like I didn't end up figuring out how git add works. Guess my knowledge of
C is pretty limited, and there are lots of header files involved. Well guess
I'll have to study more. Today I didn't end up doing any work towards my
experiment.
* day 4
<2025-11-16 Sun>
** [[https://git-scm.com/book/en/v2][pro git]]
Still I have to read through;

- Git Tools
- Customizing Git
- Git and Other Systems
- Git Internals

* day 5
<2025-10-17 Fri>
:LOGBOOK:
CLOCK: [2025-10-17 Fri 07:21]--[2025-10-17 Fri 08:07] =>  0:46
:END:
I'm switching to a more bottom up approach. Looking into the git repo at it's
initial commit. Luckily there are already resources available for doing this. I
am not alone in my insanity of trying to understand this project. I found the
baby-git repo which is the initial commit with extra comments for readability. I
also have the Decoding Git book which I am going to work through in addition to
the pro git book. Let's spend an hour reading through the Decoding Book and
taking note of any important findings. Tomorrow I'll contiue off from the object
database heading in chapter 2 of decoding git.

The following references are mentioned to being useful.
- https://www.gnu.org/software/libc/manual/html_node/index.html
- https://pubs.opengroup.org/onlinepubs/9699919799/
- https://www.cplusplus.com/reference/
- https://zlib.net/manual.html
- https://zlib.net/zlib_how.html

Git uses thes SHA-1 hash function to map file contents to hash values.

There are the following four basic components in Git's initial commit:
- objects
- an object database
- a current directory cache
- a working directory
** Objects
Object types:
- blob
- tree
- commit

An object is an abstraction of data and metadata. It is indexed and referenced
through its hash value. The name of an object is its hash value. This hash value
is used to refer and look up to the specific content.

The general structure of an object is:
#+begin_example
object tag
' '                 (single space)
size of object data (in bytes)
'\0'                (null character)
object binary data
#+end_example

The first part of an object consists of the object metadata. The second part
consists of the object data (the binary data). The space and null byte are used
to seperate the two. The object tag is simply what type of object it is (one of:
blob, tree, commit) and the size of the object data in bytes before deflation.

*** Blobs (binary lapge objects)
Woah that just blew my mind, didn's know blobs are just binary large objects.
Any file that the user adds could be a blob, it sould be the binary
representation of a video, plaintext, or any file. Git generates a blob object
that is named, indexed and referenced through the deflated blob objects SHA-1
hash value.

*** Tree object
A tree object contains a list of files aded to a repository. each file has a
mode, path and sha-1 hash. The size of the tree is the sum of the sizes of the
file information entries in the tree object data.

*** Commit object
A commit contains the hash value of a tree object being committed ahd the hash
value of any parent tree objects specified by the user, metadata about the user
who committed the tree, the time and date when the commit was made and a
user-supplied comment known today as the commit message.
* day 6
<2025-10-18 Sat>

Today I will continue my journey through the decoding git book.

Last night I was playing around with gdb. I remembered the tool tig, and
downloaded that. I use magit already, so I am curious if I will need to use tig,
or if magit will be good enough.

** Using magit-diff on whats-cooking.txt
There is a typo in this document, guess the whats-cooking.txt file is kinda
informal and not enough people read it to be nitpicky about typos(?).
** lei
Here is a link on how I can filter the mail from the kernel mailing lists. Just
putting this here for posterity, probably in the future I will want to have very
specific routing of emails. There is a nice tutorial on setting up automatic
mail to a imap folder. I could probably set this up with my gmail.
https://people.kernel.org/monsieuricon/lore-lei-part-1-getting-started
** git clean -n -d
I ended up building git a while ago and had a bunch of junk in my next branch. I
searched online for a solution to removing all of that junk. To do this, use
#+begin_src sh
man git-clean
#+end_src
Basically it will show a preview of what happens when you remove all of the
untracked files and directories in your repo. huh, the command is disabled by
default in magit. That is probably for the best it seems like a pretty dangerous
command.
** Find initial commit in the git git repo
use
#+begin_src sh
  git rev-list --max-parents=0 HEAD
#+end_src
to find all commits that have 0 parents. The last hash that is printed;
#+begin_example
e83c5163316f89bfbde7d9ab23ca2e25604af290
#+end_example
corresponds with the initial commit of the git repository. Before doing this,
you are going to want to create a new branch so that you can start screwing
around with the code. I created one called 'blind' which I think is
representative to how I feel compared to much more experienced git users. Then
you can checkout that commit and go to town. Alright that is great to look at I
guess.
* ugit
https://www.leshenko.net/p/ugit/

This is pretty interesting. It is a tutorial that guides you through
implementing a toy git program. I think I will work through this to get a better
understanding of how git works.
** Why learn Git internals?
In order to effectively rebase and merge and do more with the more advanced
features, having a mental model of how git works under the hood will be
beneficial.
** Introducing: ugit
** Why learn Git using code?
** Why not learn Git by reading the real Git code?
** About Me
** cli: Add argument parser
** init: Create new .ugit directory
